dnl Process this file with autoconf to produce a configure script.
AC_INIT(portage, 2.1.13, kito@gentoo.org, portage-prefix)

dnl Define our precious vars
dnl AC_ARG_VAR(prefix, the location portage will be installed to)
dnl AC_ARG_VAR(offset-prefix, the location all packages will be installed to)
dnl AC_ARG_VAR(rootuser, the user that pwns portage)
dnl AC_ARG_VAR(portageuser, the user that portage will operate as [defaults to 'portage'])
dnl AC_ARG_VAR(portagegroup, the group that portage will operate under [defaults to 'portage'])

case "${prefix}" in
	'') 	AC_MSG_ERROR([bad value ${prefix} for --prefix, must not be empty]) ;;
	*/)		AC_MSG_ERROR([bad value ${prefix} for --prefix, must not end with '/']) ;;
	/*|NONE) ;;
	*) 		AC_MSG_ERROR([bad value ${prefix} for --prefix, must start with /]) ;;
esac

AC_CANONICAL_BUILD
AC_CANONICAL_HOST
AC_CANONICAL_TARGET

AM_INIT_AUTOMAKE
dnl AM_CONFIG_HEADER(config.h)

dnl Checks for programs.
dnl store clfags prior, otherwise it's not propogaed.
if test "x$CFLAGS" != "x"
then
CFLAGS=$CFLAGS
fi

AC_PREFIX_DEFAULT([/usr])
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_LN_S
AX_PATH_EGREP
case `${EGREP} --version 2>/dev/null` in
*"GNU grep"*) ;;
*)
	AC_MSG_ERROR([Need GNU grep for ${EGREP}])
	;;
esac

AX_PATH_XCU_ID([required])
AC_PATH_PROGS(RM, [grm gnurm rm], /bin/rm)
AC_PATH_PROGS(MV, [gmv gnumv mv], /bin/mv)
AC_PATH_PROGS(SED, [gsed gnused sed], /usr/bin/sed)

dnl when /bin/sh is bash, then BASH is set to /bin/sh
test "${BASH}" != "/bin/sh" || $as_unset BASH
AC_PATH_PROGS(BASH, [bash2 bash], /bin/bash)

dnl >=python-2.2, but prefer path .../python
AC_PATH_PROG(PYTHON, [python], /usr/bin/python)
AX_WITH_PYTHON([2.2], [missing])
if test "x${PYTHON}" = "xmissing"; then
	PYTHON=
	AC_PATH_PROGS(PYTHON,
			  [python2.4 python2.3 python2.2 python2 python],
			  [/usr/bin/python])
	AX_WITH_PYTHON([2.2], [missing])
fi
if test "x${PYTHON}" = "xmissing"; then
	AC_MSG_ERROR([cannot find python version >= 2.2])
fi

AC_PATH_PROG(PERL, perl, [/usr/bin/perl])
AC_PROG_PERL_VERSION([5.6.0], , [PERL=])
if test "x${PERL}" = "x"; then
	AC_PATH_PROGS(PERL, [perl5.8.6 perl5.8.5 perl5.8.4 perl5.8.3 perl5.8.2 \
		perl5.8.1 perl5.8.0 perl5.8 perl5.6.1 perl5.6.0 perl5.6 perl5 perl],
		[/usr/bin/perl])
	AC_PROG_PERL_VERSION([5.6.0], ,
		[AC_MSG_ERROR([cannot find a perl version >= 5.6.0])]
	)
fi

AC_PATH_PROGS(BASENAME, [gbasename gnubasename basename], /bin/basename)
AC_PATH_PROGS(DIRNAME, [gdirname gnudirname dirname], /usr/bin/dirname)
AC_PATH_PROG(DIALOG, dialog, no)
AC_PATH_PROG(WGET, wget, /usr/bin/wget)
AC_PATH_PROG(CURL, curl, no)
AC_PATH_PROG(INSTALL_INFO, install-info, /usr/bin/install-info)
AC_PATH_PROG(SANDBOX, sandbox, no)
AC_PATH_PROG(PRELINK, prelink, no)
AC_PATH_PROG(RSYNC, rsync, /usr/bin/rsync)
AC_PATH_PROG(CVS, cvs, /usr/bin/cvs)
AC_PATH_PROG(SVN, svn, no)
AC_PATH_PROGS(GPG, [gpg pgp], no)
AC_PATH_PROG(MD5SUM, md5sum, no)
AC_PATH_PROG(LOGGER, logger, no)
AC_PATH_PROGS(FIND, [gfind gnufind find], /usr/bin/find)
AC_PATH_PROGS(FILE, [gfile gnufile file], /usr/bin/file)
AC_PATH_PROG(SCANELF, scanelf, no)
AC_PATH_PROG(SETFILES, setfiles, no)
AC_PATH_PROG(FAKEROOT, fakeroot, no)
AC_PATH_PROGS(DIFF, [gdiff gnudiff diff], /usr/bin/diff)
AC_PATH_PROGS(PATCH, [gpatch gnupatch patch], /usr/bin/patch)
AC_PATH_PROGS(XARGS, [gxargs gnuxargs xargs], /usr/bin/xargs)
dnl Checks for libraries.
dnl Replace `main' with a function in -lc:
AC_CHECK_LIB(c, main)
dnl Replace `main' with a function in -ldl:
AC_CHECK_LIB(dl, main)
dnl Replace `main' with a function in -lgcc:
AC_CHECK_LIB(gcc, main)
dnl Replace `main' with a function in -lpthread:
AC_CHECK_LIB(pthread, main)

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(fcntl.h limits.h strings.h sys/file.h sys/time.h unistd.h getopt.h stdio.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_UID_T
AC_TYPE_MODE_T
AC_TYPE_SIZE_T

dnl Checks for library functions.
AC_FUNC_ALLOCA
AC_TYPE_SIGNAL
AC_CHECK_FUNCS(getcwd mkdir regcomp rmdir strdup strerror strspn strstr)

AC_ARG_ENABLE(tbz2tool,
AC_HELP_STRING([--enable-tbz2tool],[build tbz2tool, tool for creating binpkgs (default yes)]),
[case "${enableval}" in
  yes)  enable_tbz2tool=true;;
  no)	enable_tbz2tool=false;;
  *)	AC_MSG_ERROR(bad value ${enableval} for --enable-tbz2tool);;
esac],
[enable_tbz2tool=true])

AC_ARG_ENABLE(missingos,
AC_HELP_STRING([--enable-missingos],[build compatibility missingos code for python 2.2 (default auto)]),
[case "${enableval}" in
  yes)	enable_missingos=true;;
  no)	enable_missingos=false;;
  auto)	enable_missingos=auto;;
  *)	AC_MSG_ERROR(bad value ${enableval} for --enable-missingos);;
esac],
[enable_missingos=auto])

AC_ARG_ENABLE(just-compiled-sources,
AC_HELP_STRING([--enable-just-compiled-sources],[install just the bytecode, not the sources (default no)]),
[case "${enableval}" in
  yes)	enable_py_sources=false;;
  no)	enable_py_sources=true;;
  *)	AC_MSG_ERROR(bad value ${enableval} for --enable-just-compiled-sources);;
esac],
[enable_py_sources=true])

AC_ARG_WITH(user,
AC_HELP_STRING([--with-user=me],[use user 'me' for portage to work as (default portage)]),
[case "${withval}" in
  ""|yes) AC_MSG_ERROR(bad value ${withval} for --with-user);;
  *) portageuser="${withval}";;
esac],
[portageuser="portage"])

AC_ARG_WITH(group,
AC_HELP_STRING([--with-group=mygroup],[use group 'mygroup' for portage to work as (default portage)]),
[case "${withval}" in
  ""|yes) AC_MSG_ERROR(bad value ${withval} for --with-group);;
  *) portagegroup="${withval}";;
esac],
[portagegroup="portage"])

AC_ARG_WITH(wheelgid,
AC_HELP_STRING([--with-wheelgid=wheelgid],[let portage use 'wheelgid' as wheel group (default 0)]),
[case "${withval}" in
  ""|yes) AC_MSG_ERROR(bad value ${withval} for --with-wheelgid);;
  *) wheelgid="${withval}";;
esac],
[wheelgid="0"])

AC_ARG_WITH(rootuser,
AC_HELP_STRING([--with-rootuser=me],[declares 'me' as the portage owner (default root)]),
[case "${withval}" in
  ""|yes) AC_MSG_ERROR(bad value ${withval} for --with-rootuser);;
  *) rootuser=${withval}
     rootuid=`id -u ${withval}`;;
esac],
[rootuser=root])

AC_MSG_CHECKING([for user id of ${rootuser}])
dnl grab uid of rootuser
rootuid=`${XCU_ID} -u ${rootuser}`
if [[ `echo ${rootuid} | ${EGREP} ^[[:digit:]]+$` ]]
then
	AC_MSG_RESULT([${rootuid}])
else
	AC_MSG_ERROR([error finding the user id of ${rootuser}])
fi

AC_ARG_WITH(offset-prefix, 
AC_HELP_STRING([--with-offset-prefix], [specify the installation prefix for all packages , defaults to /]),
[DOMAIN_PREFIX=$withval],
[DOMAIN_PREFIX='/'])

DEFAULT_PATH="${DOMAIN_PREFIX}/usr/bin:${DOMAIN_PREFIX}/usr/sbin:${DOMAIN_PREFIX}/bin:${DOMAIN_PREFIX}/sbin:${prefix}/bin"
AC_ARG_WITH(default-path, 
AC_HELP_STRING([--with-default-path], [specify additional PATHs available to the portage build environment ]),
[DEFAULT_PATH="${DEFAULT_PATH}":$withval],
[DEFAULT_PATH="${DEFAULT_PATH}"])


if test x$enable_missingos = xauto
then
  pyver=[`python -c 'import sys;print sys.version[0:3]';`]
  case ${pyver} in
    2.4)  ;;
    2.3)  ;;
    2.2)  enable_missingos=true;;
    *)    AC_MSG_WARN([unable to determine python version, ${pyver}]);;
  esac
fi

AC_MSG_CHECKING([for ARCH to be used])
dnl detect ARCH from target_cpu
case "${target_cpu}" in
i?86) ARCH=x86 ;;
sparc*) ARCH=sparc ;;
hppa*) ARCH=hppa ;;
powerpc*) ARCH=ppc ;;
dnl don't know more target_cpus yet...
*) AC_MSG_RESULT([unknown])
   AC_MSG_CHECKING([for default ARCH to be used])
   ARCH=${target_cpu} ;;
esac
AC_MSG_RESULT([${ARCH}])

AC_CONFIG_FILES([ Makefile ])
AC_CONFIG_FILES([ subst-install ])
AC_CONFIG_FILES([ subst-install.vars.in ])
AC_CONFIG_FILES([ src/Makefile ])
AC_CONFIG_FILES([ man/Makefile ])
AC_CONFIG_FILES([ src/python-missingos/Makefile ])
AC_CONFIG_FILES([ bin/Makefile ])
AC_CONFIG_FILES([ pym/Makefile ])
AC_CONFIG_FILES([ cnf/Makefile ])

AC_SUBST(portageuser)
AC_SUBST(portagegroup)
AC_SUBST(wheelgid)
AC_SUBST(rootuser)
AC_SUBST(rootuid)
AC_SUBST(DOMAIN_PREFIX)
AC_SUBST(DEFAULT_PATH)
AC_SUBST(ARCH)
AC_SUBST(PORTAGE_BASE,['${libdir}/portage'])
AM_CONDITIONAL(INSTALL_PYTHON_SOURCES, test x$enable_py_sources = xtrue)
AM_CONDITIONAL(BUILD_TBZ2TOOL, test x$enable_tbz2tool = xtrue)
AM_CONDITIONAL(BUILD_MISSINGOS, test x$enable_missingos = xtrue)
#AM_CONDITIONAL(BUILD_FILTER_ENV, test x$enable_filter_env = xtrue)

AC_MSG_CHECKING([for a list of variables known by configure])
rm -f subst-install.vars.in.in.tmp
pt_configvars=`grep '^s,@' ${srcdir}/configure | sed -e 's|^s,@\([[^@]][[^@]]*\)@.*$|\1|'`
{
	pt_all_configurevars=
	for pt_configvar in ${pt_configvars}
	do
		echo "${pt_configvar}=@${pt_configvar}@"
		pt_all_configurevars="${pt_all_configurevars} ${pt_configvar}"
	done

	echo "all_configurevars='${pt_all_configurevars}'"

} > subst-install.vars.in.in.tmp
diff ${srcdir}/subst-install.vars.in.in subst-install.vars.in.in.tmp >/dev/null
if [[ $? != 0 ]]
then
	rm -f ${srcdir}/subst-install.vars.in.in
	cp subst-install.vars.in.in.tmp ${srcdir}/subst-install.vars.in.in
fi
rm -f subst-install.vars.in.in.tmp
$as_unset pt_configvar pt_configvars pt_all_configurevars
AC_MSG_RESULT([ok])

AC_OUTPUT
